
--------------------
Title      : b'Untitled'
Date       : Jun 1st, 2018
Fetch Time : 01-06-2018:23-07-12
Address    : https://pastebin.com/HtPA7gQ1
ID         : HtPA7gQ1
Type       : text
b'using System;\r\nusing System.Collections.Generic;\r\nusing System.Drawing;\r\nusing OpenMetaverse;\r\nusing OpenMetaverse.Assets;\r\nusing OpenMetaverse.Imaging;\r\n\r\nnamespace cogbot.TheOpenSims\r\n{\r\n    public class SimTexture : SimAsset\r\n    {\r\n        private Image _ic;\r\n\r\n        public Image Image\r\n        {\r\n            get\r\n            {\r\n                if (_ic != null) return _ic;\r\n                ManagedImage m;\r\n                if (!OpenMetaverse.Imaging.OpenJPEG.DecodeToImage(AssetData, out m, out _ic)) return null;\r\n                return _ic;\r\n            }\r\n        }\r\n        public Bitmap BitmapImage\r\n        {\r\n            get\r\n            {\r\n                return (Bitmap)Image;\r\n            }\r\n        }\r\n\r\n        public Color MeanColor\r\n        {\r\n            get\r\n            {\r\n                Bitmap bm = BitmapImage;\r\n                if (bm == null) return Color.Empty;\r\n                int x = bm.Size.Width;\r\n                int y = bm.Size.Height;\r\n                int x4 = x / 4;\r\n                int xs = x - x4;\r\n                int y4 = y / 4;\r\n                int ys = y - x4;\r\n\r\n                long red = 0, blue = 0, green = 0;\r\n                for (int xx = x4; xx < xs; xx++)\r\n                {\r\n                    for (int yy = y4; yy < ys; yy++)\r\n                    {\r\n                        var pixel = bm.GetPixel(xx, yy);\r\n                        int tp = pixel.R + pixel.G + pixel.B;\r\n                        red += pixel.R;\r\n                        blue += pixel.B;\r\n                        green += pixel.G;\r\n                    }\r\n                }\r\n                area = x * y / 4;\r\n\r\n                red = red / area;\r\n                blue = blue / area;\r\n                green = green / area;\r\n                return Color.FromArgb((int)red, (int)blue, (int)green);\r\n            }\r\n        }\r\n        private int area;\r\n\r\n        public Dictionary<string, long> ImageStats\r\n        {\r\n            get\r\n            {\r\n                Bitmap bm = BitmapImage;\r\n                Color average = MeanColor;\r\n                var dict = new Dictionary<string, long>()\r\n                           {\r\n                               {"area", area},\r\n                           };\r\n\r\n                foreach (Color c in new Color[] { Color.Red, Color.Blue, Color.Yellow, Color.Green, Color.Purple, Color.Orange, Color.White, Color.Black })\r\n                {\r\n                    if (!ChannelRightDir(c.R, average.R)) continue;\r\n                    if (!ChannelRightDir(c.G, average.G)) continue;\r\n                    if (!ChannelRightDir(c.B, average.B)) continue;\r\n                    float hdif = AngDist(c.GetHue(), average.GetHue());\r\n                    float sdif = AngDist(c.GetSaturation(), average.GetSaturation());\r\n                    dict.Add(c.Name.ToLower() + "_h", (int)(hdif * 256));\r\n                    dict.Add(c.Name.ToLower() + "_s", (int)(sdif * 256));\r\n                }\r\n                return dict;\r\n            }\r\n        }\r\n\r\n        static bool ChannelRightDir(int cB, int averageB)\r\n        {\r\n            return cB < 128 ? averageB < 100 : averageB > 155;\r\n        }\r\n\r\n        public static float AngDist(float a1, float a2)\r\n        {\r\n            float b1, b2;\r\n            if (a1>a2)\r\n            {\r\n                b1 = a1;\r\n                b2 = a2;\r\n            }\r\n            else\r\n            {\r\n                b1 = a2;\r\n                b2 = a1;                \r\n            }\r\n            float b = b1 - b2;\r\n            if (b < Math.PI)\r\n            {\r\n                return b;\r\n            }\r\n            //otherwsie go toward sero\r\n            b2 += (float)Math.PI*2;\r\n            return b2 - b1;\r\n        }\r\n\r\n        protected override List<SimAsset> GetParts()\r\n        {\r\n            try\r\n            {\r\n                GuessAssetName();\r\n                Decode(ServerAsset);\r\n            }\r\n            catch (System.Exception ex)\r\n            {\r\n                WriteLine("" + ex);\r\n                //_TypeData = null;\r\n            }\r\n            return new List<SimAsset>() { this };\r\n        }\r\n\r\n        public SimTexture(UUID uuid, string name, AssetType type)\r\n            : base(uuid, name, type)\r\n        {\r\n        }\r\n\r\n        protected override string GuessAssetName()\r\n        {\r\n            return UnknownName;\r\n        }\r\n\r\n        public override float Length\r\n        {\r\n            get { return 2; }\r\n        }\r\n\r\n        public override bool IsContinuousEffect\r\n        {\r\n            get { return true; }\r\n        }\r\n                \r\n        public override bool SameAsset(SimAsset asset)\r\n        {\r\n            if (asset==null) return false;\r\n            if (asset.AssetType!=AssetType) return false;\r\n            if (HasData())\r\n            {\r\n                \r\n            }\r\n            if (asset is SimAnimation)\r\n            {\r\n//                r = animation.Reader;\r\n                \r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}'